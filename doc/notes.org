#+title: MuColl LCIO -> EDM4hep conversion

* Simulation
** Generate test events
(All of this is happening in ~/data/~ which is bindmounted to the outside)
Generate a few pion particle gun events for testing

#+begin_src bash
python /opt/SteeringMacros/Gen/lcio/pion_gun_pT.py
#+end_src

** Simulate events
- Simulate only 100 of the 10k available events
- ~sim_steer_GEN_CONDOR.py~ needs a minor edit to define an outputfile name to
  avoid an undefined variable error

#+begin_src bash
ddsim --inputFile gen_pionGun.slcio \
    --steeringFile /opt/SteeringMacros/Sim/sim_steer_GEN_CONDOR.py \
    --outputFile pionGun_SIM.slcio \
    --compactFile /opt/detector-simulation/geometries/MuColl_10TeV_v0A/MuColl_10TeV_v0A.xml \
    -N 100
#+end_src

* Reconstruction
** Using Marlin

- Make sure that the paths in the ~PandoraSettingsDefault.xml~ point to the right place
#+begin_src bash
sed -i 's:/code/:/opt/:' /opt/SteeringMacros/Reco/PandoraSettings/PandoraSettingsDefault.xml
#+end_src

- Also adapt a few more paths where possible via the command line

#+begin_src bash
Marlin /opt/SteeringMacros/Reco/reco_CONDOR.xml \
    --global.LCIOInputFiles=pionGun_Sim.slcio \
    --Output_REC.LCIOOutputFile=pionGun_Rec.slcio \
    --InitDD4hep.DD4hepXMLFile=/opt/detector-simulation/geometries/MuColl_10TeV_v0A/MuColl_10TeV_v0A.xml \
    --CKFTracking.MatFile=/opt/spack/opt/spack/linux-ubuntu22.04-x86_64/gcc-11.3.0/actstracking-1.1.0-vk7dd4tkm75atbkawti2mfozyujq6db2/share/ACTSTracking/data/material-maps.json \
    --DDMarlinPandora.PandoraSettingsXmlFile=/opt/SteeringMacros/Reco/PandoraSettings/PandoraSettingsDefault.xml \
    --Config.Overlay=False
#+end_src

- [ ] This segfaults in ACTS tracking

** Using Gaudi / k4geo
- Directly using the adopted steering file with the ~TrkHitConverter~
#+begin_src bash
git clone https://github.com/tmadlener/TrkHitConverter
#+end_src
then follow the instructions there to build, install and setup the processor

- Export environment variables
#+begin_src bash
export GEOMETRY=/opt/detector-simulation
#+end_src
- Make ~InitDD4hep~ use that by updating the path from which the geometry is loaded
#+begin_src python
InitDD4hep.Parameters = {
                         "DD4hepXMLFile": ["$GEOMETRY/geometries/MuColl_10TeV_v0A/MuColl_10TeV_v0A.xml"],
                         "EncodingStringParameterName": ["GlobalTrackerReadoutID"]
                         }
#+end_src
- Adapt outpufile name (optionally)
#+begin_src bash
sed -i '/LCIOOutputFile/s/\["\(.*\)"\]/["pionGun_REC.slcio"]/'
#+end_src
- Run the script
#+begin_src bash
k4run TrkHitConverter/scripts/steer_reco.py --LcioEvent.Files=pionGun_SIM.slcio -n 100
#+end_src

* Conversion
** Build a suitable LCIO version
In order to run the standalone conversion we need to build an updated version of
LCIO, because some of the functionality has not yet been backported to the
~muoncollidersoft~ version of LCIO

Until it is merged we build off of [[https://github.com/muoncollidersoft/LCIO/pull/6][this PR]] which can be most easily obtained via
#+begin_src bash
git clone --depth 1 -b backport-patch-coll-fixes https://github.com/tmadlener/LCIO
#+end_src

Afterwards we build and install it via the usual steps
#+begin_src bash
cd LCIO
mkdir build && cd build
cmake .. -GNinja \
    -DCMAKE_INSTALL_PREFIX=../install \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo
ninja install
#+end_src

Finally we make sure that we use this by adjusting the environment (assuming you
are still in the ~build~ folder)
#+begin_src  bash
export PATH=$(realpath ../install/bin):$PATH
export LD_LIBRARY_PATH=$(realpath ../install/lib):$LD_LIBRARY_PATH
export CMAKE_PREFIX_PATH=$(realpath ../install)
#+end_src

** Build a new standalone converter
We also have to rebuild the standalone converter to pick up the newly built LCIO
from above, we can use the master branch for this
#+begin_src bash
git clone https://github.com/key4hep/k4EDM4hep2LcioConv
#+end_src

And then follow the usual steps for building
#+begin_src bash
cd k4EDM4hep2LcioConv
mkdir build && cd build
cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=../install
ninja install
#+end_src

Finally setting up the environment again
#+begin_src bash
export PATH=$(realpath ../install/bin):$PATH
export LD_LIBRARY_PATH=$(realpath ../install/lib):$LD_LIBRARY_PATH
#+end_src

** Run conversion
- First we need to create a /patch file/ that allows us to have consistent event
contents (see the [[https://github.com/key4hep/k4EDM4hep2LcioConv/blob/master/doc/LCIO2EDM4hep.md][README]] for more details)
#+begin_src bash
check_missing_cols --minimal pionGun_REC_w_plainhits.slcio > edm4hep_contents.txt
#+end_src
- We have to remove the ~SiTracks~ from this list as there is still an issue in
  podio that prevents us from reading this back properly as a subset collection
#+begin_src bash
sed -i '/SiTracks /d' edm4hep_contents.txt
#+end_src
- Now we can run the converter
#+begin_src bash
lcio2edm4hep pionGun_REC_w_plainhits pionGun_edm4hep.root edm4hep_contents.txt
#+end_src
- Finally we can have a peek at the file using ~podio-dump~
#+begin_src bash
podio-dump pionGun_edm4hep.root
#+end_src
